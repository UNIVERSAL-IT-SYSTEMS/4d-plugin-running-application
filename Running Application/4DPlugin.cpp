/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Running Application
 #	author : miyako
 #	2015/08/18
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

#pragma mark -

NSRunningApplication *_getApp(C_TEXT& appBundleIdentifier)
{
	NSRunningApplication *app = nil;
	NSString *bundleIdentifier = appBundleIdentifier.copyUTF16String();
	if([bundleIdentifier isEqualToString:APP_CURRENT_APPLICATION]){
		app = [NSRunningApplication currentApplication];
	}else{
		NSArray *runningApplications = [NSRunningApplication runningApplicationsWithBundleIdentifier:bundleIdentifier];
		if([runningApplications count])
			app = [runningApplications objectAtIndex:0];
	}
	[bundleIdentifier release];
	return app;
}

#pragma mark -

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- App

		case 1 :
			App_LIST(pResult, pParams);
			break;

		case 2 :
			App_TERMINATE(pResult, pParams);
			break;

		case 3 :
			App_FORCE_TERMINATE(pResult, pParams);
			break;

		case 4 :
			App_Is_active(pResult, pParams);
			break;

		case 5 :
			App_ACTIVATE(pResult, pParams);
			break;

		case 6 :
			App_Get_icon(pResult, pParams);
			break;

		case 7 :
			App_HIDE(pResult, pParams);
			break;

		case 8 :
			App_SHOW(pResult, pParams);
			break;

		case 9 :
			App_Is_hidden(pResult, pParams);
			break;

		case 10 :
			App_Get_path(pResult, pParams);
			break;

		case 11 :
			App_Get_localized_name(pResult, pParams);
			break;

	}
}

// -------------------------------------- App -------------------------------------


void App_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_LONGINT Param3;

	NSArray *runningApplications = [[NSWorkspace sharedWorkspace]runningApplications];

	Param1.setSize(1);
	Param2.setSize(1);
	Param3.setSize(1);
	
	for(unsigned int i = 0 ; i < [runningApplications count] ; ++i){
		
		Param1.appendUTF16String([[runningApplications objectAtIndex:i]localizedName]);
		Param2.appendUTF16String([[runningApplications objectAtIndex:i]bundleIdentifier]);
		Param3.appendIntValue([[runningApplications objectAtIndex:i]processIdentifier]);
	}
	
	Param1.toParamAtIndex(pParams, 1);
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
}

void App_TERMINATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app terminate];
}

void App_FORCE_TERMINATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app forceTerminate];
}

void App_Is_active(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		returnValue.setIntValue([app isActive]);
			
	returnValue.setReturn(pResult);
}

void App_ACTIVATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app activateWithOptions:NSApplicationActivateIgnoringOtherApps];
}

void App_Get_icon(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app){
		NSImage *icon = [app icon];
        if(icon){
            NSRect imageRect = NSMakeRect(0, 0, DEFAULT_ICON_SIZE, DEFAULT_ICON_SIZE);
            CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
            CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
            CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
            CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
            CGImageDestinationAddImage(destination, image, properties);
            CGImageDestinationFinalize(destination);
            PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
            *(PA_Picture*) pResult = picture;
        }
	}
}

void App_HIDE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app hide];
}

void App_SHOW(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app unhide];
}

void App_Is_hidden(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		returnValue.setIntValue([app isHidden]);
	
	returnValue.setReturn(pResult);
}

#pragma mark -

void App_Get_path(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
    
    if(app){
        NSURL *url = [app bundleURL];
        if(!url)
            url = [app executableURL];
        
        if(url){
        
            NSString *path = (NSString *)CFURLCopyFileSystemPath((CFURLRef)url, kCFURLHFSPathStyle);
            if(path){
                returnValue.setUTF16String(path);
                [path release];
            }
        }
    }
    
	returnValue.setReturn(pResult);
}

void App_Get_localized_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

    NSRunningApplication *app = _getApp(Param1);
    
	if(app){
        returnValue.setUTF16String([app localizedName]);
    }

	returnValue.setReturn(pResult);
}

