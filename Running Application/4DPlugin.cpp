/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : Running Application
 #	author : miyako
 #	2013/08/01
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- App

		case 1 :
			App_LIST(pResult, pParams);
			break;
			
		case 2 :
			App_TERMINATE(pResult, pParams);
			break;
			
		case 3 :
			App_FORCE_TERMINATE(pResult, pParams);
			break;
			
		case 4 :
			App_Is_active(pResult, pParams);
			break;
			
		case 5 :
			App_ACTIVATE(pResult, pParams);
			break;
			
		case 6 :
			App_Get_icon(pResult, pParams);
			break;
			
		case 7 :
			App_HIDE(pResult, pParams);
			break;
			
		case 8 :
			App_SHOW(pResult, pParams);
			break;
			
		case 9 :
			App_Is_hidden(pResult, pParams);
			break;

	}
}

// -------------------------------------- App -------------------------------------


void App_LIST(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_LONGINT Param3;

	NSArray *runningApplications = [[NSWorkspace sharedWorkspace]runningApplications];

	Param1.setSize(1);
	Param2.setSize(1);
	Param3.setSize(1);
	
	for(unsigned int i = 0 ; i < [runningApplications count] ; ++i){
		
		Param1.appendUTF16String([[runningApplications objectAtIndex:i]localizedName]);
		Param2.appendUTF16String([[runningApplications objectAtIndex:i]bundleIdentifier]);
		Param3.appendIntValue([[runningApplications objectAtIndex:i]processIdentifier]);
	}
	
	Param1.toParamAtIndex(pParams, 1);
	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
}

NSRunningApplication *_getApp(C_TEXT& appBundleIdentifier)
{
	NSRunningApplication *app = nil;
	
	NSString *bundleIdentifier = appBundleIdentifier.copyUTF16String();
	
	if([bundleIdentifier isEqualToString:@"__CURRENT__"]){
		
		app = [NSRunningApplication currentApplication];
		
	}else{
		NSArray *runningApplications = [NSRunningApplication runningApplicationsWithBundleIdentifier:bundleIdentifier];
		if([runningApplications count])
			app = [runningApplications objectAtIndex:0];
	}
	
	[bundleIdentifier release];
	
	return app;
}

void App_TERMINATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app terminate];
}

void App_FORCE_TERMINATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app forceTerminate];
}

void App_Is_active(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		returnValue.setIntValue([app isActive]);
			
	returnValue.setReturn(pResult);
}

void App_ACTIVATE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app activateWithOptions:NSApplicationActivateIgnoringOtherApps];
}

void App_Get_icon(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_PICTURE returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSRunningApplication *app = _getApp(Param1);
	
	if(app){
	
		NSImage *icon = [app icon];
		if(icon) returnValue.setImage(icon);

	}

	returnValue.setReturn(pResult);
}

void App_HIDE(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app hide];
	
}

void App_SHOW(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		[app unhide];
	
}

void App_Is_hidden(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;
	
	Param1.fromParamAtIndex(pParams, 1);
	
	NSRunningApplication *app = _getApp(Param1);
	
	if(app)
		returnValue.setIntValue([app isHidden]);
	
	returnValue.setReturn(pResult);
}




